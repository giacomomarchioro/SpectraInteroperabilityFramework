# generated by datamodel-codegen:
#   filename:  spectraformat-schema.json
#   timestamp: 2022-03-31T09:36:26+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Type(Enum):
    Reflectance = 'Reflectance'
    Transimttance = 'Transimttance'
    Absorbance = 'Absorbance'
    Emmission = 'Emmission'
    Counts = 'Counts'


class Unit(Enum):
    percentage = 'percentage'
    arbitrary_unit = 'arbitrary unit'


class ProccesedValue(BaseModel):
    type: Optional[Type] = None
    expectedRange: Optional[str] = Field(
        None, description='The range of the processed data.'
    )
    unit: Optional[Unit] = Field(None, description='The unit of the processed data.')
    data: Optional[List[List[float]]] = None


class Unit1(Enum):
    nm = 'nm'
    um = 'um'
    cm_1 = 'cm-1'
    µm = 'µm'
    arbitrary_unit = 'arbitrary unit'


class Type1(Enum):
    Wavelenghts = 'Wavelenghts'
    Wavenumbers = 'Wavenumbers'


class VariablesLabel(BaseModel):
    name: Optional[str] = Field(None, description='The name of the variable.')
    unit: Optional[Unit1] = Field(None, description='The unit of the variable.')
    type: Optional[Type1] = None
    expectedRange: Optional[str] = Field(None, description='The range of the variable.')
    data: Optional[List[List[float]]] = None


class Type2(Enum):
    Reflectance = 'Reflectance'
    Transimttance = 'Transimttance'
    Absorbance = 'Absorbance'
    Emmission = 'Emmission'
    Counts = 'Counts'


class Unit2(Enum):
    percentage = 'percentage'
    arbitrary_unit = 'arbitrary unit'


class OriginalValues(BaseModel):
    type: Optional[Type2] = None
    expectedRange: Optional[str] = Field(
        None, description='The range of the original data.'
    )
    unit: Optional[Unit2] = Field(None, description='The unit of the original data.')
    data: Optional[List[List[float]]] = None


class Type3(Enum):
    Reflectance = 'Reflectance'
    Transimttance = 'Transimttance'
    Absorbance = 'Absorbance'
    Emmission = 'Emmission'
    Counts = 'Counts'


class Unit3(Enum):
    percentage = 'percentage'
    arbitrary_unit = 'arbitrary unit'


class Background(BaseModel):
    type: Optional[Type3] = None
    expectedRange: Optional[str] = Field(
        None, description='The range of the background data.'
    )
    unit: Optional[Unit3] = Field(None, description='The unit of the background data.')
    data: Optional[List[List[float]]] = None


class Type4(Enum):
    Reflectance = 'Reflectance'
    Transimttance = 'Transimttance'
    Absorbance = 'Absorbance'
    Emmission = 'Emmission'
    Counts = 'Counts'


class Unit4(Enum):
    nm = 'nm'
    um = 'um'
    cm_1 = 'cm-1'
    µm = 'µm'
    arbitrary_unit = 'arbitrary unit'


class Reference(BaseModel):
    type: Optional[Type4] = None
    expectedRange: Optional[str] = Field(
        None, description='The range of the reference data.'
    )
    unit: Optional[Unit4] = Field(None, description='The unit of the reference data.')
    data: Optional[List[List[float]]] = None


class OpenSpectraFormat(BaseModel):
    proccesedValue: ProccesedValue
    variablesLabels: List[VariablesLabel]
    originalValues: OriginalValues
    background: Background
    reference: Reference
    comments: str = Field(..., description='Comments about the data.')
    referenceCertifiedValues: str = Field(
        ..., description='The certified values of the reference.'
    )
    annotations: str = Field(..., description='Annotation about the data.')
