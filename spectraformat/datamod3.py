# generated by datamodel-codegen:
#   filename:  spectraformat-schema-defs.json
#   timestamp: 2022-03-31T09:52:00+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Unit(Enum):
    nm = 'nm'
    um = 'um'
    cm_1 = 'cm-1'
    µm = 'µm'
    arbitrary_unit = 'arbitrary unit'


class Type(Enum):
    Wavelenghts = 'Wavelenghts'
    Wavenumbers = 'Wavenumbers'


class VariablesLabels(BaseModel):
    name: Optional[str] = Field(None, description='The name of the variable.')
    unit: Optional[Unit] = Field(None, description='The unit of the variable.')
    expectedMaxValue: Optional[float] = Field(
        None,
        description='The expected maximum value that should be display, not always the max value of the array.',
    )
    expectedMinValue: Optional[float] = Field(
        None,
        description='The expected minimum value that should be display, not always the min value of the array.',
    )
    type: Optional[Type] = None
    data: Optional[List[List[float]]] = None


class Type1(Enum):
    Reflectance = 'Reflectance'
    Transimttance = 'Transimttance'
    Absorbance = 'Absorbance'
    Emmission = 'Emmission'
    Counts = 'Counts'


class Unit1(Enum):
    percentage = 'percentage'
    arbitrary_unit = 'arbitrary unit'


class SpectrumData(BaseModel):
    type: Optional[Type1] = None
    expectedMaxValue: Optional[float] = Field(
        None,
        description='The expected maximum value that should be display, not always the max value of the array.',
    )
    expectedMinValue: Optional[float] = Field(
        None,
        description='The expected minimum value that should be display, not always the min value of the array.',
    )
    unit: Optional[Unit1] = Field(None, description='The unit of the processed data.')
    data: Optional[List[List[float]]] = None


class OpenSpectraFormat(BaseModel):
    _context: Optional[str] = Field(
        'https://open-spectra.org/contexts/spectra.jsonld',
        alias='@context',
        description='The context of the data.',
    )
    id: str = Field(
        ...,
        description='The id of the spectrum, the url that returns the resource itself.',
    )
    type: Optional[str] = Field('Spectrum', description='The type of the data.')
    metadata: Optional[List[Dict[str, Any]]] = Field(
        None, description='The metadata of the spectrum.'
    )
    proccesedValue: SpectrumData
    variablesLabels: VariablesLabels
    originalValues: Optional[SpectrumData] = None
    background: Optional[SpectrumData] = None
    reference: Optional[SpectrumData] = None
    comments: Optional[str] = Field(None, description='Comments about the data.')
    referenceCertifiedValues: Optional[str] = Field(
        None, description='The certified values of the reference.'
    )
    annotations: Optional[str] = Field(None, description='Annotation about the data.')
